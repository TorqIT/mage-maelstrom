import{Combatant as t}from"../MageMaelstrom";import{ReadonlyCoordinate as e}from"../MageMaelstrom/Arena";class ChessCombatant extends t{getFirstValidAction(t){for(const e of t){const t=e();if(t)return t}}onTakeDamage(t){}onStatusEffectApplied(t){}}export const knightAndBishop={name:"Knight and Bishop",color:"#2AF",author:"Nick",CombatantSubclasses:[class extends ChessCombatant{rotation=[];rotationIndex=0;define(){return{name:"Knight",icon:"/chess-knight.svg",strength:25,agility:10,intelligence:5,abilities:["burst","thorns","critical","critical"],handicap:!0}}init({arena:t,you:s}){this.rotation=[new e({x:3,y:3}),new e({x:t.width-3,y:3}),new e({x:t.width-3,y:t.height-3}),new e({x:3,y:t.height-3})];this.rotationIndex=s.coords.getClosestIndex(this.rotation)}act(t){var e;return null!==(e=this.getFirstValidAction([()=>this.getOffMe(t),()=>this.onslaught(t),()=>this.searchPerimeter(t)]))&&void 0!==e?e:t.actions.dance()}searchPerimeter({actions:t}){let e=t.moveTo(this.rotation[this.rotationIndex]);return e||(this.rotationIndex=(this.rotationIndex+1)%4,e=t.moveTo(this.rotation[this.rotationIndex])),this.shout("Moving forward!"),e}onslaught({actions:t,helpers:e,visibleEnemies:s}){const i=e.getClosest(s);if(i)return this.shout("Eat steel!"),t.attackMove(i)}getOffMe({visibleEnemies:t,actions:e,you:s,helpers:i,spells:[o]}){let n=0;if(t.forEach((t=>{t.coords.isNextTo(s.coords)&&n++})),n>=2&&s.health.value<200&&i.canPerform(e.cast(o)))return this.shout("BEGONE"),e.cast(o)}},class extends ChessCombatant{define(){return{name:"Bishop",icon:"/chess-bishop.svg",strength:8,agility:8,intelligence:24,abilities:["force","barrier","regen","heal"],handicap:!0}}init(t){}act(t){var e;return null!==(e=this.getFirstValidAction([()=>this.getOffMe(t),()=>this.keepKnightHealthy(t),()=>this.buffKnight(t),()=>this.buffMe(t),()=>this.followKnight(t),()=>this.whackWithCrosier(t)]))&&void 0!==e?e:t.actions.dance()}followKnight({actions:t,allies:e,you:s}){if(0===e.length)return;const i=e[0];return i.coords.getDistance(s.coords)>3.5?(this.shout("My knight! Where are thee?"),t.moveTo(i)):void 0}buffKnight({actions:t,allies:e,helpers:s,visibleEnemies:i,spells:[,o,n]}){if(0===i.length||0===e.length)return;const a=e[0];return!a.statusesEffects.includes("barrier")&&s.canPerform(t.cast(o,a.id))?(this.shout("You are protected!"),t.cast(o,a.id)):!a.statusesEffects.includes("regen")&&a.health.value<300&&s.canPerform(t.cast(n,a.id))?(this.shout("You must persist!"),t.cast(n,a.id)):void 0}buffMe({actions:t,you:e,helpers:s,visibleEnemies:i,spells:[,o,n]}){if(0!==i.length)return!e.statusesEffects.includes("barrier")&&s.canPerform(t.cast(o,e.id))?(this.shout("I am protected!"),t.cast(o,e.id)):!e.statusesEffects.includes("regen")&&e.health.value<200&&s.canPerform(t.cast(n,e.id))?(this.shout("I shall recover"),t.cast(n,e.id)):void 0}keepKnightHealthy({allies:t,actions:e,helpers:s,spells:[,,,i]}){if(0===t.length)return;const o=t[0];return o.health.value<350&&s.canPerform(e.cast(i,o.id))?(this.shout("You are healed!"),e.cast(i,o.id)):void 0}getOffMe({actions:t,helpers:e,spells:[s],visibleEnemies:i,you:o}){const n=e.getClosest(i);if(n&&n.coords.isNextTo(o.coords)&&e.canPerform(t.cast(s,n.id)))return this.shout("I repel thee!"),t.cast(s,n.id)}whackWithCrosier({visibleEnemies:t,actions:e,helpers:s}){const i=s.getClosest(t);if(i)return this.shout("OH GOD"),e.attackMove(i)}}]};